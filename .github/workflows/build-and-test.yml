name: CI/CD Workflow

on:
  push:
    branches:
      - main
    tags:
      - 'v*'

jobs:
  pmd:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: PMD Main
        run: |
          ./gradlew pmdMain

      - name: PMD Test
        run: |
          ./gradlew pmdTest

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Testing
        run: |
          ./gradlew test

  build:
    runs-on: ubuntu-latest
    needs: [test, pmd]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Building
        run: |
          ./gradlew build

      - name: Store Distribution Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: distribution
          path: build/distributions/*.**

  e2e:
    runs-on: ubuntu-latest
    needs: [build]
    strategy:
      matrix:
        java-version: [8, 11, 17, 21]
    steps:
      - name: Set up Java ${{ matrix.java-version }}
        uses: actions/setup-java@v4
        with:
          distribution: temurin
          java-version: ${{ matrix.java-version }}

      - name: Download Artifacts
        uses: actions/download-artifact@v4
        with:
          name: distribution
          path: tmp/artifact

      - name: Create Test File
        run: echo "File. This is a test file." > ./tmp/test.txt

      - name: Extract Distribution
        run: tar -xf tmp/artifact/*.tar -C tmp/artifact

      - name: Run E2E Test
        run: |
          script_file=$(find tmp/artifact -name 'stringcounter' | head -n 1)
          if [[ -x "$script_file" ]]; then
            output=$("$script_file" ./tmp/test.txt)
            expected_output=$'file: 2\na: 1\nis: 1\ntest: 1\nthis: 1'
            if [[ "$output" != "$expected_output" ]]; then
              echo "Error: Output does not match expected output."
              echo "Expected output:"
              echo "$expected_output"
              echo "Actual output:"
              echo "$output"
              exit 1
            else
              echo "Output:"
              echo "$output"
            fi
          else
            echo "Error: stringcounter not found or not executable."
            exit 1
          fi

  release:
    runs-on: ubuntu-latest
    needs: [build, e2e]
    if: ${{ github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v') }}
    steps:
      - name: Download Distribution Artifact tar
        uses: actions/download-artifact@v4
        with:
          name: distribution
          path: tmp/artifact

      - name: List files in tmp/artifact directory
        run: ls -R tmp/artifact

      - name: Rename TAR and ZIP files
        run: |
          mv tmp/artifact/stringcounter-*.tar tmp/artifact/stringcounter.tar
          mv tmp/artifact/stringcounter-*.zip tmp/artifact/stringcounter.zip

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload TAR file to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tmp/artifact/stringcounter.tar
          asset_name: stringcounter.tar
          asset_content_type: application/tar

      - name: Upload ZIP file to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: tmp/artifact/stringcounter.zip
          asset_name: stringcounter.zip
          asset_content_type: application/zip
